!! Однострочный комментарий
!*
  Многострочный комментарий
*!

!! --------------------------------------------------

!! Присваивание значений переменным

а = 1
б = 0,5
в = истина
в = ложь
г = %(1 2,5 "Строка" истина %(0 0 0))
д = "Строка"
е = %(1: 2,5 "Строка": истина)

а = б = 0 !! Множественное определение переменных, `а` и `б` имеют одинаковое значение

!! --------------------------------------------------

!! Арифметические операции

1 + 2 - 3 * 4 / 5 !! Стандартная арифметика, результат — 0
7 // 2            !! Целочисленное деление, результат — 3
7 /: 2            !! Остаток от деления, результат — 1
3 ** 2            !! Возведение 3 в квадрат, результат — 9
2 /// 4           !! Квадратный корень из 4, результат — 2

"Привет, " + "мир!" !! Конкатенация строк, результат — "Привет, мир!"
%(1 2 3) + %(4 5 6) !! Объединение списков, результат — %(1 2 3 4 5 6)
%(1: 2) + %(3: 4)   !! Объединение словарей, результат — %(1: 2 3: 4)

"Строка" * 2 !! Повторение строки дважды, результат — "СтрокаСтрока"
%(1 2 3) * 2 !! Повторение списка дважды, результат — %(1 2 3 1 2 3)

!! Присваивание с арифметической операцией

а += 1  !! Раскладывается в `а = а + 1`
а //= 3 !! Раскладывается в `а = а // 3`

!! Инкрементация и декрементация

!*
  Могут иметь высокий и низкий приоритет:
  - Низкий приоритет (постфиксная запись): возвращается текущее значение, затем из переменной вычитается 1
  - Высокий приоритет (префиксная запись): из переменной вычитается 1, затем возвращается текущее значение

  Пример:
    а = 2     !! а = 2
    б = а--   !! а = 1 | б = 2
    б = --а   !! а = 0 | б = 0
*!

а++ !! Инкрементация с низким приоритетом. Вернётся текущее значение, затем значение в переменной увеличивается
++а !! Инкрементация с высоким приоритетом. Значение в переменной увеличивается, затем возвращается значение переменной
а-- !! Декрементация с низким приоритетом. Вернётся текущее значение, затем значение в переменной уменьшается
--а !! Декрементация с высоким приоритетом. Значение в переменной уменьшается, затем возвращается значение переменной

!! --------------------------------------------------

!! Логические операции

!*
  Истинным считается ненулевой операнд или операнд с ненулевой длиной:

    истина — булево значение, обозначающее логическую единицу
    ложь — булево значение, обозначающее логический ноль

    0 — ложь
    -∞...-1 и 1...∞ — истина



    "" — пустая строка — ложь
    "строка" — не пустая строка — истина

    %() — пустой список — ложь
    %(1 2 3) — не пустой список — истина

    %(:) — пустой словарь — ложь
    %(1: 2) — не пустой словарь — истина
*!

1 ==  2 !! Один равен двум, результат — ложь
1 !=  2 !! Один не равен двум, результат — истина
1 \/  2 !! Один меньше двух, результат — истина
1 /\  2 !! Один больше двух, результат — ложь
1 \/= 2 !! Один меньше или равен двум, результат — истина
1 /\= 2 !! Один больше или равен двум, результат — ложь

не 1    !! Истина, если операнд ложен, и наоборот
1 и 0   !! Истина, если все операнды истинны, иначе — ложь
1 или 0 !! Истина, если хотя бы один операнд истеннен, иначе — ложь

!! --------------------------------------------------

!! Конструкции

!*
  Условная конструкция `если-то-иначе`

  Если условие истинно, то совершить действие
  Иначе, если другое условие истинно, то совершить действие (может быть несколько ветвей, необязательные ветви)
  Иначе — совершить действие (может быть одна ветвь, необязательная ветвь)

  При выполнении действия внутри какой-либо ветви, все остальные ветви пропускаются
*!

если а /\ 0 то
  показать("Значение больше нуля")
---

если а /\ 0 то
  показать("Значение больше нуля")
иначе
  показать("Значение не больше нуля")
---

если а /\ 0 то
  показать("Значение больше нуля")
иначе если а \/ 0 то
  показать("Значение меньше нуля")
---

если а /\ 0 то
  показать("Значение больше нуля")
иначе если а \/ 0 то
  показать("Значение меньше нуля")
иначе
  показать("Значение равно нулю")
---

!*
  Конструкция множественного выбора `проверить-при-иначе`

  Проверяется одно значение, переданное в начале
  В ветвях происходит проверка в зависимости от оператора сравнения, по умолчанию — `==`
  Оператор для всех сравнений может быть изменён в начале конструкции
  Оператор для одноразового сравнения может быть изменён перед проверяемым значением
  Если ни одно из условий не было истинным, отработает ветвь `иначе` (необязательная ветвь)

  При выполнении действия внутри какой-либо ветви, все ветви продолжают проверку, если выход не указан явно оператором `прервать`
*!

проверить а
  при 1 !! если а == 1 то
    показать(1)
---

проверить а /\
  при 1 !! если а /\ 1 то
    показать(2)
  при 2 !! если а /\ 3 то
    показать(3)
---

проверить а /\
  при 1 и \/ 3 !! если а /\ 1 и а \/ 3 то
    показать(2)
  иначе !! Если условие ветви выше будет ложно
---

проверить а
  при 1
    показать(1)
    прервать    !! Если условие ветви истинно, то произойдёт выход и остальные условия не будут проверяться
  при 1
    показать(1)
---

!*
  Цикл `пока-иначе`

  До того момента, пока выполняется установленное условие, действия будут выполняться
  Необязательная ветвь `иначе` срабатывает, если условие не было выполнено ни разу
  Доступные операторы внутри цикла:
    `пропустить` — пропускает одну итерацию цикла (переход обратно к проверке условия)
    `прервать` — прерывает цикл
*!

а = 5
пока а /\ 0
  показать(а--) !! 5 4 3 2 1
---

пока а != а
  показать(0)
иначе
  показать(а)
---

!*
  Цикл-генератор `для-от-до-через-иначе`

  В переменную присваивается значение, установленное после `от`;
  После исполнения тела цикла к переменной прибавляется шаг, установленный после `через` (необязательная часть, по умолчанию — 1)
  Цикл завершается, когда значение переменной больше или равно числу, указанному после `до`
  Необязательная ветвь `иначе` отрабатывает, если не произошло ни одного вхождения
*!

для а от 0 до 5
  показать(а) !! 0 1 2 3 4
---

для а от 0 до 5 через 2
  показать(а) !! 0 2 4
---

для а от 0 до 0
  показать(а)
иначе
  показать(-1)
---

!*
  Цикл со вхождением `для-из-иначе`

  В переменную помещается значение из коллекции (список, строка) от элемента с индексом 0 и до конца
  Необязательная ветвь `иначе` отрабатывает, если не произошло ни одного вхождения (если коллекция пуста)
*!

для а из %(1 2 3)
  показать(а) !! 1 2 3
---

для а из "Привет"
  позазать(а) !! П р и в е т
---

для а из %()
  показать(а)
иначе
  показать(-1)
---

!*
  Описание и вызов функций

  Функция может не иметь имени

  При объявлении функции можно указать принимаемые параметры:
    - Их может не быть
    - Позиционные параметры — параметры, которые функция обязательно должна получить
    - Аккумулятор позиционных параметры — можно передать неограниченное количество параметров, которые будут помещены в список, если количество параметров превышает количество позиционных параметров, после него могут быть указаны только именованные аргументы
    - Именованные параметры — необязательные для передачи параметры, которые имеют значение по умолчанию. Указываются только после позиционных
    - Аккумулятор именованным параметров — можно передать неограниченное количество параметров, которые будут помещены в словарь в формате строка-значение, если именованные параметры не указаны. Строго указывается последним

  При вызове функции можно указать посылаемые параметры:
    - Их может не быть
    - Позиционные параметры — просто передаются значения
    - Именованные параметры — указывается имя параметра, оператор присваивания (`=`) и значения параметра. Передаются только после позиционных
*!

а = функция()
  показать("Безымянная функция")
---

функция а()
  показать("Функция без параметров")
---

а()

!! ------------------------------

функция а(б в)
  показать("Функция с позиционными параметрами")
---

а(1 2) !! б = 1 | в = 2

!! ------------------------------

функция а(б=0 в = -1)
  показать("Функция с именованными парамтерами")
---

а()            !! б = 0 | в = -1
а(1)           !! б = 1 | в = -1
а(1 2)         !! б = 1 | в = 2
а(в = 2)       !! б = 0 | в = 2
а(б = 1)       !! б = 1 | в = -1
а(в = 2 б = 1) !! б = 1 | в = 2

!! ------------------------------

функция а(б *в)
  показать("Функция с аккумулятором позиционных аргументов")
---

а(1)       !! б = 1 | в = %()
а(1 2)     !! б = 1 | в = %(2)
а(1 2 3 4) !! б = 1 | в = %(2 3 4)

!! ------------------------------

функция а(б *в г=0)
  показать("Функция с аккумулятором позиционных аргументов и именованным аргументов")
---

а(1)           !! б = 1 | в = %()      | г = 0
а(1 2)         !! б = 1 | в = %(2)     | г = 0
а(1 2)         !! б = 1 | в = %(2)     | г = 0
а(1 г=1)       !! б = 1 | в = %()      | г = 1
а(1 2 3 4)     !! б = 1 | в = %(2 3 4) | г = 0
а(1 2 3 4 г=1) !! б = 1 | в = %(2 3 4) | г = 1

!! ------------------------------

функция а(**б)
  показать("Функция с аккумулятором именованных аргументов")
---

а()            !! б = %(:)
а(в = 0)       !! б = %("в": 0)
а(б = 0 в = 0) !! б = %("б": 0 "в": 0)

!! ------------------------------

функция а(б *в г=0 **д)
  показать("Функция со всеми вариациями аргументов")
---

а(1)               !! б = 1 | в = %()      | г = 0 | д = %(:)
а(1 2)             !! б = 1 | в = %(2)     | г = 0 | д = %(:)
а(1 2 3 4)         !! б = 1 | в = %(2 3 4) | г = 0 | д = %(:)
а(1 г = 1)         !! б = 1 | в = %()      | г = 1 | д = %(:)
а(1 з = 1)         !! б = 1 | в = %()      | г = 0 | д = %("з": 1)
а(1 з = 1 г = 1)   !! б = 1 | в = %()      | г = 1 | д = %("з": 1)
а(1 2 з = 1 г = 1) !! б = 1 | в = %(2)     | г = 1 | д = %("з": 1)

!*
  Описание и инстанциирование (создание объектов) класса

  Описываемый класс может иметь родительские классы
  Внутри класса описываются функции. В контексте классов и объктов они называются методами
  Существуют «магические» методы, которые отвечают за действия класса в особых случаях:
    - `конструктор` — создание объекта
    - `деструктор` — удаление объекта
    - `сложение/вычитание/...` — действия при сложении/вычитании/... объекта с другим значением
  Внутри метода создаются определённые заранее переменные:
    - `объект` — сам объект, метод которого исполняется
*!

класс А
  функция конструктор(имя = "мир")
    объект.приветствие(имя) !! Вызов метода объект
  ---

  функция приветствие(имя)
    показать("Привет, \(имя)!")
  ---
---

а = А()       !! Привет, мир!
б = А("Петя") !! привет, Петя!
